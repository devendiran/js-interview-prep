1. construct json based on nested form
Eg: <form><input name="form[address][street]"/></form> 

2. construct json for nested childs with dot separation

Eg input -> {
    a: {
        b: {
            c:1
        }
    }
}

output -> {
    'a.b.c': 1
}

3. Construct you own version of promise

4. Get n unique strings with active k parallel requests.

5. sum(1)(2,3)(..n)...()

6. set count for parent level obj based on child levels
Eg -> input -> {
    'parent': {
        'child1': {
            'child1.1': {
                count: 1
            },
            'child1.2': {
                count: 2
            }
        },
        'child2': {
            count: 4
        }
    }
}

output -> {
    'parent': {
        ###count: 7
        'child1': {
            ###count: 3
            'child1.1': {
                count: 1
            },
            'child1.2': {
                count: 2
            }
        },
        'child2': {
            count: 4
        }
    }
}

7. polyfills for map, reduce, filter, flatten, 

8. Implement promise all

9. Create a Task Runner which can run at max 'n' tasks in parallel. At any given point only 'n' tasks can run in parallel and any extra tasks needs to wait until any task from running has finished executing
    
   9.1 with priority tasks

10. Expected output for this

    Eg -> input =>      let middleware = []
                        middleware.push((next) => {
                        console.log(1)
                        next()
                        console.log(1.1)
                        })
                        middleware.push((next) => {
                        console.log(2)
                        next()
                        console.log(2.1)
                        })
                        middleware.push(() => {
                            console.log(3)
                        })


11. compose middlewares 

    Eg -> input     
        
       function recursiveMiddleware(i, middlewareLength) {
            if(i+1 > middlewareLength - 1) {
            return null;
            }
            recursiveMiddleware(i+1,middlewareLength);
            if (i+1 < middlewareLength - 1) {
            return  () => {
                    middleware[i](middleware[i+1]);
            };
            }
        }
        
        function compose(middleware) {
            // Write here
            middleware[0](recursiveMiddleware(1,middleware.length)); 
        }
        
        compose(middleware);


12. Write Throttle and debounce.

13. Throttle edge case scenario

14. compose methods like , sum, add, divide

15. simulate new operation(using Object.create() and call method)

16. Memonize sum js function.

17. Memonize js that supports all parameter types and cache size.

18. js event loop related questions and hosting related questions



